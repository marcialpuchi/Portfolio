@import 'bourbon';
@import '_variables';

// variables - colors

$main-text: #7f8c97; // main text
$link: #acb7c0; // anchor tags
$background: #e9f0f5; // body background color

$color-1: #303e49; // blue dark
$color-2: #c03b44; // red
$color-3: #ffffff; // white
$color-4: #75ce66; // green
$color-5: #f0ca45; // yellow

/* -------------------------------- 

Mixins

-------------------------------- */

// mixins - rem fallback - credits: http://zerosixthree.se/

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

// mixins - border radius

@mixin border-radius($radius:.25em) {
  border-radius: $radius;
}

// center vertically and/or horizontally an absolute positioned element

@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}

/* -------------------------------- 

Layout

-------------------------------- */

// layout - breakpoints
   
$S:     320px;   
$M:     768px;     
$L:     1170px;     

// layout - media queries

@mixin MQ($canvas) {
  @if $canvas == S {
   @media only screen and (min-width: $S) { @content; } 
  }
  @else if $canvas == M {
   @media only screen and (min-width: $M) { @content; } 
  }
  @else if $canvas == L {
   @media only screen and (min-width: $L) { @content; } 
  }
}

*, *:after, *:before {
	@include box-sizing(border-box);
}

img {
	max-width: 100%;
}


/* -------------------------------- 

Modules - reusable parts of our design

-------------------------------- */

.cd-container { /* this class is used to give a max-width to the element it is applied to, and center it horizontally when it reaches that max-width */
	width: 90%;
	max-width: $L; // breakpoints inside partials > _layout.scss
	margin: 0 auto;

	&::after { /* clearfix */
		content: '';
		display: table;
		clear: both;
	}
}

/* -------------------------------- 

Main components - Vertical Timeline

-------------------------------- */

#cd-timeline {
	position: relative;
	padding: 2em 0;
	margin: {
		top: 2em;
		bottom: 2em;
	}

	&::before {
		/* this is the vertical line */
		content: '';
		position: absolute;
		top: 0;
		left: 18px;
		height: 100%;
		width: 4px;
		background: $b;
	}

	@include MQ(L) {
		margin: {
			top: 3em;
			bottom: 3em;
		}

		&::before {
			left: 50%;
			margin-left: -2px;
		}
	}
}

.cd-timeline-block {
	position: relative;
	margin: 2em 0;
	@include clearfix;

	&:first-child {
		margin-top: 0;
	}

	&:last-child {
		margin-bottom: 0;
	}

	@include MQ(L) {
		margin: 4em 0;

		&:first-child {
			margin-top: 0;
		}

		&:last-child {
			margin-bottom: 0;
		}
	}
}

.cd-timeline-img {
	position: absolute;
	top: 0;
	left: 0;
	width: 40px;
	height: 40px;
	border-radius: 50%;
	border: 0.2rem solid $r;
	background: $r;
	// box-shadow: 0 0 0 4px $b, inset 0 2px 0 rgba(#000, .08), 0 3px 0 4px rgba(#000, .05) ;

	img {
		display: block;
		width: 24px;
		height: 24px;
		position: relative;
		left: 50%;
		top: 50%;
		margin-left: -12px;
		margin-top: -12px;

		&.hp {
		    width: 30px;
		    height: 30px;
		    margin-left: -15px;
		    margin-top: -15px;
		}

		&.ucol{
			width: 32px;
		    height: 32px;
		    margin-left: -16px;
		    margin-top: -16px;
		}

		&.otago{
			width: 30px;
		    height: 30px;
		    margin-left: -15px;
		    margin-top: -13px;
		}
	}

	i {
		display: block;
		font-size: 30px;
		position: relative;
		left: 50%;
		top: 50%;
		margin-left: -50px;
		margin-top: -14px;
	}

	@include MQ(L) {
		width: 60px;
		height: 60px;
		left: 50%;
		margin-left: -30px;

		img{
			&.hp {
				width: 47px;
			    height: 48px;
			    margin-left: -23px;
			    margin-top: -24px;
			}

			&.ucol{
				width: 60px;
			    height: 50px;
			    margin-left: -26px;
			    margin-top: -25px;
			}

			&.otago{
				width: 40px;
				height: 40px;
			    margin-left: -20px;
	    		margin-top: -18px;
			}
		}

		
		

		/* Force Hardware Acceleration in WebKit */
		-webkit-transform: translateZ(0);
		-webkit-backface-visibility: hidden;

		&.is-hidden {
			visibility: hidden;
		}

		&.bounce-in {
			visibility: visible;
			@include animation(cd-bounce-1 .6s);
		}
	}
}

.cd-timeline-content {
	position: relative;
	margin-left: 60px;
	background: $color-3;
	@include border-radius;
	padding: 1em;
	box-shadow: 0 3px 0 darken($background, 5%);
	@include clearfix;

	h2 {
		color: $color-1;
	}

	p, .cd-read-more, .cd-date {
		@include font-size(13px);
	}

	.cd-read-more, .cd-date {
		display: inline-block;
	}

	p {
		margin: 1em 0;
		line-height: 1.6;
		text-align: justify;
	}

	.cd-read-more {
		float: right;
		padding: .8em 1em;
		background: $link;
		color: $color-3;
		@include border-radius;

		.no-touch &:hover {
			background-color: lighten($link, 5%);
		}
	}

	.cd-date {
		float: left;
		padding: .8em 0;
		opacity: .7;
	}

	&::before {
		content: '';
		position: absolute;
		top: 16px;
		right: 100%;
		height: 0;
		width: 0;
		border: 7px solid transparent;
		border-right: 7px solid $color-3;
	}

	@include MQ(M) {
		h2 {
			@include font-size(20px);
		}

		p {
			@include font-size(16px);
		}

		.cd-read-more, .cd-date {
			@include font-size(14px);
		}
	}

	@include MQ(L) {
		margin-left: 0;
		padding: 1.6em;
		width: 45%;

		&::before {
			top: 24px;
			left: 100%;
			border-color: transparent;
			border-left-color: $color-3;
		}

		.cd-read-more {
			float: left;
		}

		.cd-date {
			position: absolute;
			width: 100%;
			left: 75%;
			top: 6px;
			@include font-size(16px);
		}

		.cd-timeline-block:nth-child(even) & {
			float: right;

			&::before {
				top: 24px;
				left: auto;
				right: 100%;
				border-color: transparent;
				border-right-color: $color-3;
			}

			.cd-read-more {
				float: right;
			}

			.cd-date {
				left: auto;
				right: 122%;
				text-align: right;
			}
		}

		&.is-hidden {
			visibility: hidden;
		}

		&.bounce-in {
			visibility: visible;
			@include animation(cd-bounce-2 .6s);
		}
	}
}

@include MQ(L) {
	/* inverse bounce effect on even content blocks */
	.cssanimations .cd-timeline-block:nth-child(even) .cd-timeline-content.bounce-in {
		@include animation(cd-bounce-2-inverse .6s);
	}
}



/* -------------------------------- 

Main Components - Horizontal Timeline

-------------------------------- */

.cd-horizontal-timeline {
  opacity: 1;
  margin: 2em auto;
  // @include transition(opacity .2s);

  &::before {
    /* never visible - this is used in jQuery to check the current MQ */
    content: 'mobile';
    display: none;
  }

  &.loaded {
    /* show the timeline after events position has been set (using JavaScript) */
    opacity: 1;
  }

  .timeline {
    position: relative;
    height: 100px;
    width: 90%;
    max-width: 800px;
    margin: 0 auto;
  }

  .events-wrapper {
    position: relative;
    height: 100%;
    margin: 0 40px;
    overflow: hidden;

    &::after, &::before {
      /* these are used to create a shadow effect at the sides of the timeline */
      content: '';
      position: absolute;
      z-index: 2;
      top: 0;
      height: 100%;
      width: 20px;
    }

    &::before {
      left: 0;
        @include background-image(linear-gradient(to right,$y, rgba($y, 0)));
    }

    &::after {
      right: 0;
      @include background-image(linear-gradient(to left,$y rgba($y, 0)));
    }
  }

  .events {
    /* this is the grey line/timeline */
    position: absolute;
    z-index: 1;
    left: 0;
    top: 49px;
    height: 2px;
    /* width will be set using JavaScript */
    background: darken($y, 10%);
    @include transition(transform .4s);
  }

  .filling-line {
    /* this is used to create the green line filling the timeline */
    position: absolute;
    z-index: 1;
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
    background-color: $b;
    @include transform(scaleX(0));
    @include transform-origin(left center);
    @include transition(transform .3s);
  }

  .events a {
    position: absolute;
    bottom: 0;
    z-index: 2;
    text-align: center;
    font-size: 1.3rem;
    padding-bottom: 15px;
    color: $g;
    /* fix bug on Safari - text flickering while timeline translates */
    @include transform(translateZ(0));

    &::after {
      /* this is used to create the event spot */
      content: '';
      position: absolute;
      @include center(x);
      bottom: -5px;
      height: 12px;
      width: 12px;
      border-radius: 50%;
      border: 2px solid darken($y, 10%);
      background-color: $y;
      @include transition(background-color .3s, border-color .3s);
    }

    .no-touch &:hover::after {
      background-color: $b;
      border-color: $b;
    }

    &.selected {
      pointer-events: none;

      &::after {
        background-color: $b;
        border-color: $b;
      }
    }

    &.older-event::after {
      border-color: $b;
    }
  }

  @include MQ(L) {
    margin: 6em auto;
    
    &::before {
      /* never visible - this is used in jQuery to check the current MQ */
      content: 'desktop';
    }
  }
}

.cd-timeline-navigation a {
  /* these are the left/right arrows to navigate the timeline */
  position: absolute;
  z-index: 1;
  @include center(y);
  height: 34px;
  width: 34px;
  border-radius: 50%;
  border: 2px solid darken($y, 10%);
  /* replace text with an icon */
  overflow: hidden;
  // color: transparent;
  text-indent: 100%;
  white-space: nowrap;
  @include transition(border-color .3s);
  
  &::after {
    /* arrow icon */
    content: '';
    position: absolute;
    height: 16px;
    width: 16px;
    @include center;
    background: url(cd-arrow.svg) no-repeat 0 0;
  }

  &.prev {
    left: 0;
    @include transform(translateY(-50%) rotate(180deg));
  }

  &.next {
    right: 0;
  }

  .no-touch &:hover {
    border-color: $b;
  }

  &.inactive {
    cursor: not-allowed;

    &::after {
      background-position: 0 -16px;
    }

    .no-touch &:hover {
      border-color: darken($b, 10%);
    }
  }
}

.cd-horizontal-timeline .events-content {
  position: relative;
  width: 100%;
  margin: 2em 0;
  overflow: hidden;
  @include transition(height .4s);

  li {
    position: absolute;
    z-index: 1;
    width: 100%;
    left: 0;
    top: 0;
    @include transform(translateX(-100%));
    padding: 0 5%;
    opacity: 0;
    @include animation-duration(.4s);
    @include animation-timing-function(ease-in-out);

    &.selected {
      /* visible event content */
      position: relative;
      z-index: 2;
      opacity: 1;
      @include transform(translateX(0));
    }

    &.enter-right, &.leave-right {
      @include animation-name(cd-enter-right);
    }

    &.enter-left,  &.leave-left {
      @include animation-name(cd-enter-left);
    }
    
    &.leave-right, &.leave-left {
      @include animation-direction(reverse);
    }
  }
  
  li > * {
    max-width: 800px;
    margin: 0 auto;
  }

  @include MQ(M) {

    h2 {
      font-size: 7rem;
    }

    em {
      font-size: 2rem;
    }

    p {
      font-size: 1.8rem;
    }
  }
  
}

/* -------------------------------- 

Key Frames

-------------------------------- */

@include keyframes(cd-bounce-1) {
	0% {
		opacity: 0;
		@include transform(scale(.5));
	}

	60% {
		opacity: 1;
		@include transform(scale(1.2));
	}

	100% {
		@include transform(scale(1));
	}
}

@include keyframes(cd-bounce-2) {
	0% {
		opacity: 0;
		@include transform(translateX(-100px));
	}

	60% {
		opacity: 1;
		@include transform(translateX(20px));
	}

	100% {
		@include transform(translateX(0));
	}
}

@include keyframes(cd-bounce-2-inverse) {
	0% {
		opacity: 0;
		@include transform(translateX(100px));
	}

	60% {
		opacity: 1;
		@include transform(translateX(-20px));
	}

	100% {
		@include transform(translateX(0));
	}
}

@include keyframes(cd-enter-right) {
  0% {
    opacity: 0;
    @include transform(translateX(100%));
  }

  100% {
    opacity: 1;
    @include transform(translateX(0%));
  }
}

@include keyframes(cd-enter-left) {
  0% {
    opacity: 0;
    @include transform(translateX(-100%));
  }

  100% {
    opacity: 1;
    @include transform(translateX(0%));
  }
}